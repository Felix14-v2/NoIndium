buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("com.guardsquare:proguard-gradle:${project.proguard_version}") {
            exclude(group: "com.android.tools.build")
        }
    }
}

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id "com.matthewprenger.cursegradle" version '1.4.0'
    id "com.modrinth.minotaur" version '1.2.1'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = project.mod_version
group = project.maven_group

def ENV = System.getenv()

def RELEASE_NAME = "[${project.minecraft_version}] ${version}"
def RELEASE_FILE = "${buildDir}/libs/${archivesBaseName}-${version}.jar"

@SuppressWarnings('GrMethodMayBeStatic')
def getChangeLog() {
    return "Initial release"
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://jitpack.io" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "com.github.Draylar.omega-config:omega-config-base:${project.omega_config_version}"
    include "com.github.Draylar.omega-config:omega-config-base:${project.omega_config_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    archiveClassifier.set("shadowed")
    configurations = [project.configurations.shadow]
}

//noinspection UnnecessaryQualifiedReference
task proguardJar(type: proguard.gradle.ProGuardTask, dependsOn: shadowJar) {

    Map<String, String> MODULE_INFO_CLASS_FILTER = new HashMap<String, String>(1) {{ put("filter", "!module-info.class") }}

    // NOTE: The "code/allocation/variable" optimisation (see: https://www.guardsquare.com/manual/configuration/optimizations) breaks remapJar.
    configuration("proguard-rules.pro")

    libraryjars(
            new HashMap<String, String>(2) {{
                putAll(MODULE_INFO_CLASS_FILTER)
                put("jarfilter", "!**.jar")
            }},
            fileTree("${System.getenv("JAVA_HOME")}/jmods").matching { include("java.base.jmod") }.getSingleFile()
    )
    libraryjars(MODULE_INFO_CLASS_FILTER, project.configurations.runtimeClasspath )

    File shadowedJar = shadowJar.archiveFile.get().asFile
    injars(shadowedJar)
    outjars("${buildDir}/tmp/${shadowedJar.getName()}")
}

prepareRemapJar {
    dependsOn(proguardJar)
}

remapJar {
    inputFile.set(proguardJar.outJarFileCollection.singleFile)
}

curseforge {
    if (ENV.CURSEFORGE_API_KEY) {
        apiKey = ENV.CURSEFORGE_API_KEY
    }

    project {
        id = project.curseforge_id
        changelog = getChangeLog()
        releaseType = "release"
        addGameVersion project.minecraft_version
        addGameVersion "Fabric"

        mainArtifact(file(RELEASE_FILE)) {
            displayName = RELEASE_NAME
            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'terrablender-fabric'
                requiredDependency 'patchouli-fabric'

                embeddedLibrary 'omega-config'
                embeddedLibrary 'fabric-shield-lib'

                optionalDependency 'roughly-enough-items'
            }
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

//Modrinth publishing
import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

task modrinth(type: TaskModrinthUpload, dependsOn: remapJar, group: "upload") {
    onlyIf {
        ENV.MODRINTH_TOKEN
    }
    token = ENV.MODRINTH_TOKEN

    projectId = project.modrinth_id
    changelog = getChangeLog()

    versionNumber = version
    versionName = RELEASE_NAME
    versionType = VersionType.valueOf("RELEASE")

    uploadFile = file(RELEASE_FILE)

    addGameVersion(project.minecraft_version as String)
    addLoader("fabric")
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url "https://maven.cafeteria.dev/releases"
            credentials {
                username = System.getenv().mcdUsername
                password = System.getenv().mcdPassword
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
